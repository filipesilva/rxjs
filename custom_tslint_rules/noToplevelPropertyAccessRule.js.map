{"version":3,"file":"noToplevelPropertyAccessRule.js","sourceRoot":"","sources":["../../../tools/tslint/noToplevelPropertyAccessRule.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;;;AAGH,0CAA8C;AAC9C,+BAAiC;AAEjC;IAA0B,wBAAY;IAAtC;;IAeA,CAAC;IAHQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,OAAO,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAba,mBAAc,GAAG,iCAAiC,CAAC;IACnD,aAAQ,GAAkB;QACtC,QAAQ,EAAE,6BAA6B;QACvC,WAAW,EAAE,2CAA2C;QACxD,SAAS,EAAE,2DAA2D;QACtE,OAAO,EAAE,IAAI;QACb,kBAAkB,EAAE,mBAAmB;QACvC,IAAI,EAAE,eAAe;QACrB,cAAc,EAAE,KAAK;KACtB,CAAC;IAKJ,WAAC;CAAA,AAfD,CAA0B,oBAAY,GAerC;AAfY,oBAAI;AAiBjB,SAAS,IAAI,CAAC,GAAsB;IAClC,OAAO,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,IAAa;QAC9D,kEAAkE;QAClE,0FAA0F;QAC1F,qFAAqF;QACrF,mDAAmD;QACnD,IAAI,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAC/D,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YACrF,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YACnE,OAAO;SACR;QAED,kCAAkC;QAClC,IAAI,EAAE,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE;YAC7E,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;SACjD;QAED,OAAO,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACL,CAAC;AAID,IAAM,WAAW,GAAG,CAAC,cAAM,OAAA,CAAC;IAC1B,gBAAgB,EAAE,gBAAgB;IAClC,QAAQ,EAAE,QAAQ;CACnB,CAAC,EAHyB,CAGzB,CAAC,EAAE,CAAC;AACN,IAAM,YAAY,GAAG;IACnB,gBAAgB,EAAE,gBAAgB;IAClC,QAAQ,EAAE,QAAQ;CACnB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {IRuleMetadata, RuleFailure, WalkContext} from 'tslint/lib';\nimport {AbstractRule} from 'tslint/lib/rules';\nimport * as ts from 'typescript';\n\nexport class Rule extends AbstractRule {\n  public static FAILURE_STRING = 'Avoid toplevel property access.';\n  public static metadata: IRuleMetadata = {\n    ruleName: 'no-toplevel-property-access',\n    description: 'Bans the use of toplevel property access.',\n    rationale: 'Toplevel property access prevents effecting tree shaking.',\n    options: null,\n    optionsDescription: 'Not configurable.',\n    type: 'functionality',\n    typescriptOnly: false,\n  };\n\n  public apply(sourceFile: ts.SourceFile): RuleFailure[] {\n    return this.applyWithFunction(sourceFile, walk);\n  }\n}\n\nfunction walk(ctx: WalkContext<void>) {\n  return ts.forEachChild(ctx.sourceFile, function cb(node: ts.Node): void {\n    // Stop recursing into this branch if it's a definition construct.\n    // These are function expression, function declaration, class, or arrow function (lambda).\n    // The body of these constructs will not execute when loading the module, so we don't\n    // need to mark function calls inside them as pure.\n    if (ts.isFunctionDeclaration(node) || ts.isFunctionExpression(node) ||\n        ts.isClassDeclaration(node) || ts.isClassExpression(node) || ts.isArrowFunction(node) ||\n        ts.isMethodDeclaration(node) || ts.isInterfaceDeclaration(node)) {\n      return;\n    }\n\n    // Fail any property access found.\n    if (ts.isPropertyAccessExpression(node) || ts.isElementAccessExpression(node)) {\n      ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n    }\n\n    return ts.forEachChild(node, cb);\n  });\n}\n\n\n\nconst CORE_TOKENS = (() => ({\n  'ApplicationRef': 'ApplicationRef',\n  'NgZone': 'NgZone',\n}))();\nconst CORE_TOKENS2 = {\n  'ApplicationRef': 'ApplicationRef',\n  'NgZone': 'NgZone',\n};\n"]}